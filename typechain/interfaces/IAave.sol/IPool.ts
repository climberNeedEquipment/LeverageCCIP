/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypesV3 {
  export type EModeCategoryStruct = {
    ltv: BigNumberish;
    liquidationThreshold: BigNumberish;
    liquidationBonus: BigNumberish;
    priceSource: AddressLike;
    label: string;
  };

  export type EModeCategoryStructOutput = [
    ltv: bigint,
    liquidationThreshold: bigint,
    liquidationBonus: bigint,
    priceSource: string,
    label: string
  ] & {
    ltv: bigint;
    liquidationThreshold: bigint;
    liquidationBonus: bigint;
    priceSource: string;
    label: string;
  };

  export type ReserveConfigurationMapStruct = { data: BigNumberish };

  export type ReserveConfigurationMapStructOutput = [data: bigint] & {
    data: bigint;
  };

  export type ReserveDataStruct = {
    configuration: DataTypesV3.ReserveConfigurationMapStruct;
    liquidityIndex: BigNumberish;
    currentLiquidityRate: BigNumberish;
    variableBorrowIndex: BigNumberish;
    currentVariableBorrowRate: BigNumberish;
    currentStableBorrowRate: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
    id: BigNumberish;
    aTokenAddress: AddressLike;
    stableDebtTokenAddress: AddressLike;
    variableDebtTokenAddress: AddressLike;
    interestRateStrategyAddress: AddressLike;
    accruedToTreasury: BigNumberish;
    unbacked: BigNumberish;
    isolationModeTotalDebt: BigNumberish;
  };

  export type ReserveDataStructOutput = [
    configuration: DataTypesV3.ReserveConfigurationMapStructOutput,
    liquidityIndex: bigint,
    currentLiquidityRate: bigint,
    variableBorrowIndex: bigint,
    currentVariableBorrowRate: bigint,
    currentStableBorrowRate: bigint,
    lastUpdateTimestamp: bigint,
    id: bigint,
    aTokenAddress: string,
    stableDebtTokenAddress: string,
    variableDebtTokenAddress: string,
    interestRateStrategyAddress: string,
    accruedToTreasury: bigint,
    unbacked: bigint,
    isolationModeTotalDebt: bigint
  ] & {
    configuration: DataTypesV3.ReserveConfigurationMapStructOutput;
    liquidityIndex: bigint;
    currentLiquidityRate: bigint;
    variableBorrowIndex: bigint;
    currentVariableBorrowRate: bigint;
    currentStableBorrowRate: bigint;
    lastUpdateTimestamp: bigint;
    id: bigint;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    accruedToTreasury: bigint;
    unbacked: bigint;
    isolationModeTotalDebt: bigint;
  };
}

export interface IPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADDRESSES_PROVIDER"
      | "BRIDGE_PROTOCOL_FEE"
      | "FLASHLOAN_PREMIUM_TOTAL"
      | "FLASHLOAN_PREMIUM_TO_PROTOCOL"
      | "backUnbacked"
      | "borrow"
      | "deposit"
      | "flashLoan"
      | "flashLoanSimple"
      | "getEModeCategoryData"
      | "getReserveData"
      | "getReserveNormalizedIncome"
      | "getReservesList"
      | "getUserAccountData"
      | "liquidationCall"
      | "mintUnbacked"
      | "rebalanceStableBorrowRate"
      | "repay"
      | "repayWithATokens"
      | "repayWithPermit"
      | "rescueTokens"
      | "setUserUseReserveAsCollateral"
      | "supply"
      | "supplyWithPermit"
      | "swapBorrowRateMode"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_PROTOCOL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLASHLOAN_PREMIUM_TOTAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLASHLOAN_PREMIUM_TO_PROTOCOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backUnbacked",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      AddressLike,
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoanSimple",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEModeCategoryData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedIncome",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "mintUnbacked",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithATokens",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_PROTOCOL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLASHLOAN_PREMIUM_TOTAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLASHLOAN_PREMIUM_TO_PROTOCOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backUnbacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashLoanSimple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEModeCategoryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintUnbacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayWithATokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IPool extends BaseContract {
  connect(runner?: ContractRunner | null): IPool;
  waitForDeployment(): Promise<this>;

  interface: IPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADDRESSES_PROVIDER: TypedContractMethod<[], [string], "view">;

  BRIDGE_PROTOCOL_FEE: TypedContractMethod<[], [bigint], "view">;

  FLASHLOAN_PREMIUM_TOTAL: TypedContractMethod<[], [bigint], "view">;

  FLASHLOAN_PREMIUM_TO_PROTOCOL: TypedContractMethod<[], [bigint], "view">;

  backUnbacked: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, fee: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  flashLoan: TypedContractMethod<
    [
      receiverAddress: AddressLike,
      assets: AddressLike[],
      amounts: BigNumberish[],
      interestRateModes: BigNumberish[],
      onBehalfOf: AddressLike,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  flashLoanSimple: TypedContractMethod<
    [
      receiverAddress: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEModeCategoryData: TypedContractMethod<
    [id: BigNumberish],
    [DataTypesV3.EModeCategoryStructOutput],
    "view"
  >;

  getReserveData: TypedContractMethod<
    [asset: AddressLike],
    [DataTypesV3.ReserveDataStructOutput],
    "view"
  >;

  getReserveNormalizedIncome: TypedContractMethod<
    [asset: AddressLike],
    [bigint],
    "view"
  >;

  getReservesList: TypedContractMethod<[], [string[]], "view">;

  getUserAccountData: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralBase: bigint;
        totalDebtBase: bigint;
        availableBorrowsBase: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;

  liquidationCall: TypedContractMethod<
    [
      collateralAsset: AddressLike,
      debtAsset: AddressLike,
      user: AddressLike,
      debtToCover: BigNumberish,
      receiveAToken: boolean
    ],
    [void],
    "nonpayable"
  >;

  mintUnbacked: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rebalanceStableBorrowRate: TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  repayWithATokens: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, interestRateMode: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  repayWithPermit: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      onBehalfOf: AddressLike,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  rescueTokens: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUserUseReserveAsCollateral: TypedContractMethod<
    [asset: AddressLike, useAsCollateral: boolean],
    [void],
    "nonpayable"
  >;

  supply: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supplyWithPermit: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  swapBorrowRateMode: TypedContractMethod<
    [asset: AddressLike, interestRateMode: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADDRESSES_PROVIDER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BRIDGE_PROTOCOL_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FLASHLOAN_PREMIUM_TOTAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FLASHLOAN_PREMIUM_TO_PROTOCOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "backUnbacked"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, fee: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      receiverAddress: AddressLike,
      assets: AddressLike[],
      amounts: BigNumberish[],
      interestRateModes: BigNumberish[],
      onBehalfOf: AddressLike,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashLoanSimple"
  ): TypedContractMethod<
    [
      receiverAddress: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEModeCategoryData"
  ): TypedContractMethod<
    [id: BigNumberish],
    [DataTypesV3.EModeCategoryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveData"
  ): TypedContractMethod<
    [asset: AddressLike],
    [DataTypesV3.ReserveDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveNormalizedIncome"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReservesList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserAccountData"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralBase: bigint;
        totalDebtBase: bigint;
        availableBorrowsBase: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidationCall"
  ): TypedContractMethod<
    [
      collateralAsset: AddressLike,
      debtAsset: AddressLike,
      user: AddressLike,
      debtToCover: BigNumberish,
      receiveAToken: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintUnbacked"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalanceStableBorrowRate"
  ): TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayWithATokens"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, interestRateMode: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayWithPermit"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      onBehalfOf: AddressLike,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rescueTokens"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserUseReserveAsCollateral"
  ): TypedContractMethod<
    [asset: AddressLike, useAsCollateral: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyWithPermit"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapBorrowRateMode"
  ): TypedContractMethod<
    [asset: AddressLike, interestRateMode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
