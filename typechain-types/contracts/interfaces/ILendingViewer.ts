/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ILendingViewerInterface extends Interface {
  getFunction(
    nameOrSignature: "balance" | "interestRates" | "liquidity" | "ltv" | "price"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRates",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ltv",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "price", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ltv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
}

export interface ILendingViewer extends BaseContract {
  connect(runner?: ContractRunner | null): ILendingViewer;
  waitForDeployment(): Promise<this>;

  interface: ILendingViewerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balance: TypedContractMethod<
    [
      account: AddressLike,
      underlyingAsset: AddressLike,
      supplyToken: AddressLike,
      borrowToken: AddressLike
    ],
    [[bigint, bigint] & { collaterals: bigint; debts: bigint }],
    "nonpayable"
  >;

  interestRates: TypedContractMethod<
    [supplyToken: AddressLike, borrowToken: AddressLike],
    [[bigint, bigint] & { lending: bigint; borrowing: bigint }],
    "view"
  >;

  liquidity: TypedContractMethod<
    [collateralAsset: AddressLike, debtAsset: AddressLike],
    [[bigint, bigint] & { lending: bigint; borrowing: bigint }],
    "view"
  >;

  ltv: TypedContractMethod<
    [collateralAsset: AddressLike, debtAsset: AddressLike],
    [bigint],
    "view"
  >;

  price: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<
    [
      account: AddressLike,
      underlyingAsset: AddressLike,
      supplyToken: AddressLike,
      borrowToken: AddressLike
    ],
    [[bigint, bigint] & { collaterals: bigint; debts: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRates"
  ): TypedContractMethod<
    [supplyToken: AddressLike, borrowToken: AddressLike],
    [[bigint, bigint] & { lending: bigint; borrowing: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<
    [collateralAsset: AddressLike, debtAsset: AddressLike],
    [[bigint, bigint] & { lending: bigint; borrowing: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "ltv"
  ): TypedContractMethod<
    [collateralAsset: AddressLike, debtAsset: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  filters: {};
}
