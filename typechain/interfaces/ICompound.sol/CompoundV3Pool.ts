/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CompoundV3PoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseBorrowMin"
      | "baseMinForRewards"
      | "baseScale"
      | "baseToken"
      | "baseTrackingBorrowSpeed"
      | "baseTrackingSupplySpeed"
      | "borrowKink"
      | "borrowPerSecondInterestRateBase"
      | "borrowPerSecondInterestRateSlopeHigh"
      | "borrowPerSecondInterestRateSlopeLow"
      | "getReserves"
      | "getUtilization"
      | "isBuyPaused"
      | "isSupplyPaused"
      | "isTransferPaused"
      | "isWithdrawPaused"
      | "numAssets"
      | "storeFrontPriceFactor"
      | "supplyKink"
      | "supplyPerSecondInterestRateSlopeHigh"
      | "supplyPerSecondInterestRateSlopeLow"
      | "supplyTo"
      | "totalBorrow"
      | "totalReserves"
      | "totalSupply"
      | "withdrawTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "baseBorrowMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseMinForRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseScale", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseTrackingBorrowSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseTrackingSupplySpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowKink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPerSecondInterestRateBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPerSecondInterestRateSlopeHigh",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPerSecondInterestRateSlopeLow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBuyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storeFrontPriceFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyKink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyPerSecondInterestRateSlopeHigh",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyPerSecondInterestRateSlopeLow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyTo",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseBorrowMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseMinForRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTrackingBorrowSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTrackingSupplySpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowKink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowPerSecondInterestRateBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowPerSecondInterestRateSlopeHigh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowPerSecondInterestRateSlopeLow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBuyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeFrontPriceFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyKink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyPerSecondInterestRateSlopeHigh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyPerSecondInterestRateSlopeLow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export interface CompoundV3Pool extends BaseContract {
  connect(runner?: ContractRunner | null): CompoundV3Pool;
  waitForDeployment(): Promise<this>;

  interface: CompoundV3PoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseBorrowMin: TypedContractMethod<[], [bigint], "view">;

  baseMinForRewards: TypedContractMethod<[], [bigint], "view">;

  baseScale: TypedContractMethod<[], [bigint], "view">;

  baseToken: TypedContractMethod<[], [string], "view">;

  baseTrackingBorrowSpeed: TypedContractMethod<[], [bigint], "view">;

  baseTrackingSupplySpeed: TypedContractMethod<[], [bigint], "view">;

  borrowKink: TypedContractMethod<[], [bigint], "view">;

  borrowPerSecondInterestRateBase: TypedContractMethod<[], [bigint], "view">;

  borrowPerSecondInterestRateSlopeHigh: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  borrowPerSecondInterestRateSlopeLow: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  getReserves: TypedContractMethod<[], [bigint], "view">;

  getUtilization: TypedContractMethod<[], [bigint], "view">;

  isBuyPaused: TypedContractMethod<[], [boolean], "view">;

  isSupplyPaused: TypedContractMethod<[], [boolean], "view">;

  isTransferPaused: TypedContractMethod<[], [boolean], "view">;

  isWithdrawPaused: TypedContractMethod<[], [boolean], "view">;

  numAssets: TypedContractMethod<[], [bigint], "view">;

  storeFrontPriceFactor: TypedContractMethod<[], [bigint], "view">;

  supplyKink: TypedContractMethod<[], [bigint], "view">;

  supplyPerSecondInterestRateSlopeHigh: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  supplyPerSecondInterestRateSlopeLow: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  supplyTo: TypedContractMethod<
    [dst: AddressLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalBorrow: TypedContractMethod<[], [bigint], "view">;

  totalReserves: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  withdrawTo: TypedContractMethod<
    [to: AddressLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseBorrowMin"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseMinForRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseTrackingBorrowSpeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseTrackingSupplySpeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowKink"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowPerSecondInterestRateBase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowPerSecondInterestRateSlopeHigh"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowPerSecondInterestRateSlopeLow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUtilization"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isBuyPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSupplyPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTransferPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWithdrawPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "numAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "storeFrontPriceFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyKink"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyPerSecondInterestRateSlopeHigh"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyPerSecondInterestRateSlopeLow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyTo"
  ): TypedContractMethod<
    [dst: AddressLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalBorrow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [to: AddressLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
