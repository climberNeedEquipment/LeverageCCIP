/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ILeverager {
  export type InputParamsStruct = {
    asset: AddressLike;
    counterAsset: AddressLike;
    amount: BigNumberish;
    flags: BigNumberish;
    data: BytesLike;
  };

  export type InputParamsStructOutput = [
    asset: string,
    counterAsset: string,
    amount: bigint,
    flags: bigint,
    data: string
  ] & {
    asset: string;
    counterAsset: string;
    amount: bigint;
    flags: bigint;
    data: string;
  };
}

export interface ILeveragerInterface extends Interface {
  getFunction(
    nameOrSignature: "borrow" | "close" | "supply" | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrow",
    values: [ILeverager.InputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [ILeverager.InputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [ILeverager.InputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [ILeverager.InputParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface ILeverager extends BaseContract {
  connect(runner?: ContractRunner | null): ILeverager;
  waitForDeployment(): Promise<this>;

  interface: ILeveragerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrow: TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "nonpayable"
  >;

  close: TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "payable"
  >;

  supply: TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "close"
  ): TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [params: ILeverager.InputParamsStruct],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
